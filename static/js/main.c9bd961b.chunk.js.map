{"version":3,"sources":["Buttons.js","App.js","reportWebVitals.js","index.js"],"names":["Button","props","id","onClick","func","label","Display","App","holder","useState","carrier","setcarrier","display","setdisplay","num1","setnum1","num2","setnum2","numA","setnumA","operator","setoperator","console","log","num","parseFloat","parseInt","Number","isInteger","superIf","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c9bd961b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\n// const buttons = [[\"clear\",\"C\",\" / \"],[9,8,7,\" * \"],[6,5,4,\" - \"],[3,2,1,\" + \"],[0,\".\",\" = \"]]\r\n// return (\r\n// <div className=\"container\">\r\n// {buttons.map((button, index) => {\r\n  \r\n//   <div>\r\n//     {button.map((values,index2)=>{\r\n//     <Button key={index} label={button} click={() => this.clickHandler(button)} />\r\n//     }\r\n//     )\r\n//   <div/>  \r\n// })}\r\n// </div>\r\n// );\r\n\r\n\r\n\r\n\r\n\r\nconst Button = (props) =>{\r\n  \r\n  return (\r\n    \r\n      <button id={props.id} onClick={()=> {\r\n             props.func(props.label)}}>{props.label}\r\n      </button>\r\n    \r\n  )\r\n};\r\n\r\n\r\nconst Display =(props)=>{\r\n//   \r\n  return(\r\n    <div>\r\n      <h1>{props.label}  </h1>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n\r\n  export{\r\n    Button,\r\n    \r\n    Display,\r\n  }","import React, { useState } from \"react\";\nimport './App.css';\nimport {Button, Display} from './Buttons.js'\n\nfunction App() {\nconst [carrier, setcarrier] = useState(\"\")\nconst [display, setdisplay] = useState(0);\nconst [num1, setnum1] = useState(0)\nconst [num2, setnum2] = useState(0)\nconst [numA, setnumA] = useState(\"A\")\nconst [operator, setoperator] =useState(\"\")\nlet holder\n \n\n\nconst superIf = (carrier)=>{\n\n  console.log(carrier);\n   if(carrier === \" Clear \" ) {\n\n    setdisplay(0)\n    setnumA(\"A\")\n    setnum1(0)\n    setnum2(0)\n    setoperator(\"\")\n    setcarrier(\"\")\n\n  } else if(carrier ===\" C \"){\n\n    if(numA === \"A\"){\n\n      setnum1(0)\n      setdisplay(0)\n      setcarrier(\"\")\n\n    }else{\n\n      setnum2(0)\n      setdisplay(0)\n      setcarrier(\"\")\n    }\n  } else if(carrier ===\" / \"){\n      setoperator(\"divide\")\n    \n    setnumA(\"B\")\n    \n    setcarrier(\"\")\n\n  } else if(carrier === \" * \"){\n    setoperator(\"multiply\")\n    \n    setnumA(\"B\")\n    setcarrier(\"\")\n\n  } else if(carrier === \" - \"){\n    setoperator(\"subtract\")\n    \n    setnumA(\"B\")\n    setcarrier(\"\")\n  } else if(carrier === \" + \"){\n\n    console.log(1)\n    setoperator(\"add\")\n    \n    setnumA(\"B\")\n    setcarrier(\"\")\n\n  } else if(carrier === \" = \") {\n    console.log(\"=\")\n    let num =0\n    if(operator === \"add\"){\n        num = parseFloat(num1) + parseFloat(num2)\n    }else if(operator === \"subtract\"){\n        num = parseFloat(num1) - parseFloat(num2)\n    }else if(operator === \"multiply\"){\n      console.log(parseInt(num1))\n      console.log(parseFloat(num2))\n        num = parseFloat(num1) * parseFloat(num2)\n        console.log (num)\n    }else if(operator === \"divide\"){\n        num = parseFloat(num1) / parseFloat(num2)\n    }\n    \n    console.log(num)\n    setnum1(num)\n    setdisplay(num)\n    setnum2(0)\n    setoperator(\"\")\n    setcarrier(\"\")\n\n  } else if (Number.isInteger(carrier)||carrier ===\".\") {\n\n    if(numA === \"A\"){\n      \n      if (num1 === 0){\n        if (carrier ===\".\"){\n\n           holder =`${num1}${carrier}`\n          \n        }else{\n\n           holder = parseInt(`${num1}${carrier}`)\n          \n        }\n\n      }else{\n      holder =`${num1}${carrier}`}\n      setnum1(holder);\n      setdisplay(holder);\n      setcarrier(\"\")\n      \n\n     }else{\n      if (num2 === 0){\n        if (carrier ===\".\"){\n\n           holder =`${num2}${carrier}`\n          \n        }else{\n\n           holder = parseInt(`${num2}${carrier}`)\n          \n        }\n\n      }else{\n      holder =`${num2}${carrier}`}\n      setnum2(holder);\n      setdisplay(holder);\n      setcarrier(\"\")\n\n\n\n\n     \n      \n      \n      \n     \n        \n    }\n\n }\n}\nsuperIf(carrier)\n  \n  return (\n    <div className=\"App\">\n      <Display label = {display} />\n      <div id=\"div1\" className=\"divRow\">\n        <Button id =\"aa\" label = \" Clear \" func={setcarrier}/>\n        <Button id =\"ab\" label = \" C \" func={setcarrier}/>\n        <Button id =\"ac\" label = \" / \" func={setcarrier}/>\n      </div>\n      <div id=\"div2\" className=\"divRow\">\n        <Button id =\"ba\" label = {9} func={setcarrier}/>\n        <Button id =\"bb\" label = {8} func={setcarrier}/>\n        <Button id =\"bc\" label = {7} func={setcarrier}/>\n        <Button id =\"bd\" label = \" * \" func={setcarrier}/>\n      </div>\n      <div  id=\"div3\" className=\"divRow\">\n        <Button id =\"ca\" label = {6} func={setcarrier}/>\n        <Button id =\"cb\" label = {5} func={setcarrier}/>\n        <Button id =\"cc\" label = {4} func={setcarrier}/>\n        <Button id =\"cd\" label = \" - \" func={setcarrier}/>\n      </div>\n      <div id=\"div4\" className=\"divRow\">\n        <Button id =\"da\" label = {3} func={setcarrier}/>\n        <Button id =\"db\" label = {2} func={setcarrier}/>\n        <Button id =\"dc\" label = {1} func={setcarrier}/>\n        <Button id =\"dd\" label = \" + \" func={setcarrier} />\n      </div>\n      <div id=\"div5\" className=\"divRow\">\n        <Button id =\"ea\" label = {0} func={setcarrier}/>\n        <Button id =\"eb\" label = \".\" func={setcarrier}/>\n        <Button id =\"ec\" label = \" = \" func={setcarrier}/>\n      </div>\n\n    </div>\n  );\n\n\n\n\n\n\n\n\n\n\n  \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}